---
# tasks file for cca.splunk.enterprise-install
#
# Description:
#
# Prerequisite:
#
# Author: Roger Lindquist (github.com/rlinq)
#
# Release: 2025.1.1

- name: Include task to get Splunk status
  include_tasks: splunk_status.yml

- name: Include task to stage files
  include_tasks: stage_install_files.yml
  when:
    - enterprise_upgrade | default(false)

- name: Stop splunk from command line
  ansible.builtin.command:
    cmd: '{{ stop_command }}'
  when:
    - stat_splunk_enterprise_bin.stat.exists
    - enterprise_upgrade | default(false)
    - inventory_hostname != groups.cluster_peers | default([])

- name: Find Splunk install file in tmp directory
  ansible.builtin.find:
    paths: "{{ cca_splunk_var_tmp }}"
    patterns: "splunk-{{ splunk_enterprise_version }}-*64.tgz"
  register: find_splunk_tgz

- name: Assert that only a single splunk package is matched
  ansible.builtin.assert:
    that:
      find_splunk_tgz.files | length == 1
    fail_msg: >-
      Could not find exactly one Splunk tar file on the host
      that matches splunk-{{ splunk_enterprise_version }}-*64.tgz
  when:
    - not stat_splunk_enterprise_bin.stat.exists or
      enterprise_upgrade | default(false)

- name: Untar Splunk package
  ansible.builtin.unarchive:
    src: "{{ item.path }}"
    dest: "{{ splunk_path }}"
    remote_src: true
    extra_opts: [--strip-components=1]
  register: splunk_tar_extraction
  loop: "{{ find_splunk_tgz.files }}"
  when:
    - not stat_splunk_enterprise_bin.stat.exists or
      enterprise_upgrade | default(false)

- name: Include task to get Splunk status
  include_tasks: splunk_status.yml
  when:
    - stat_splunk_enterprise_bin.stat.exists
    - not enterprise_upgrade | default(false)

- name: Create directory used by notify handler before splunk is started
  ansible.builtin.file:
    path: "{{ splunk_path }}/var/run"
    state: directory
    mode: '775'
  when:
    - not stat_splunk_enterprise_bin.stat.exists

- name: Create directory used by cca to store state files
  ansible.builtin.file:
    path: "{{ splunk_path }}/.cca"
    state: directory
    mode: '775'

- name: If an Splunk upgrade is performed, cleanup files from older versions
  ansible.builtin.command:
    cmd: >
      {{ cca_splunk_var_tmp }}/bin/splunk_upgrade_cleanup.sh
      {{ cca_splunk_var_tmp }}/dat/untracked_files_splunk_{{ splunk_enterprise_version }}_Linux.diff
      {{ splunk_path }}
  when:
    - splunk_tar_extraction.changed
    - enterprise_upgrade | default(false)

- name: Start splunk from command line
  ansible.builtin.command:
    cmd: '{{ start_command }}'
  when:
    - stat_splunk_enterprise_bin.stat.exists

- name: Wait until Splunk is started
  ansible.builtin.command:
    cmd: "timeout 30 {{ splunk_path }}/bin/splunk status"
  register: splunk_status_result
  until: splunk_status_result.stdout | regex_search('splunkd is running')
  retries: "{{ cca_splunkd_status_retries | default(30) | int }}"
  delay: 10
  check_mode: false
  changed_when: false
  when:
    - stat_splunk_enterprise_bin.stat.exists

- name: Check if standalone-kvupgrade-status command is available
  ansible.builtin.shell: "timeout 30 {{ splunk_path }}/bin/splunk help show | grep standalone-kvupgrade-status"
  register: kv_command_check
  ignore_errors: true
  changed_when: false
  when:
    - enterprise_upgrade | default(false)
    - not ansible_check_mode
  no_log: "{{ hide_password | default(false) }}"

- name: Wait for KVStore upgrade to complete
  ansible.builtin.shell: "timeout 30 {{ splunk_path }}/bin/splunk show standalone-kvupgrade-status"
  register: kv_status
  until: kv_status.stdout is search('Upgrade Status:\s+0')
  retries: "{{ cca_splunk_kvstore_upgrade_retries | default(30) | int }}"
  delay: "{{ cca_splunk_kvstore_upgrade_delay | default(60) | int }}"
  changed_when: false
  failed_when: 
    - kv_status.stdout is not search('Upgrade Status:\s+0')
    - "'is not a valid argument' not in kv_status.stderr"
  when:
    - enterprise_upgrade | default(false)
    - not ansible_check_mode
    - kv_command_check is defined
    - kv_command_check.rc | default(0) == 0 
    - kv_command_check.stdout | default('') != "" 
