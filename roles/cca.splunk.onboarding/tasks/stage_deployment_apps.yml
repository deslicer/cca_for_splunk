- name: Cleanup manager before staging apps
  become: false
  ansible.builtin.file:
    path: '/tmp/{{ inventory_hostname }}/{{ environment_name }}'
    state: absent
  delegate_to: localhost
  changed_when: false
  check_mode: false

- name: Check existence of deployment apps directory for this environment
  become: false
  ansible.builtin.stat:
    path: "{{ absolute_file_store_path }}/etc/{{ deployment_apps_sourcedir }}"
  register: stat_environment_specific_path
  delegate_to: localhost

- name: Assert that the required deployment_apps directory exists
  ansible.builtin.assert:
    that:
      - stat_environment_specific_path.stat.exists
    fail_msg: >-
      The directory {{ absolute_file_store_path }}/etc/{{ deployment_apps_sourcedir }} is missing
      correct and rerun the playbook.

- name: Stage manager with deployment apps from environment directory
  become: false
  ansible.builtin.copy:
    src: '{{ absolute_file_store_path }}/etc/{{ deployment_apps_sourcedir }}/'
    dest: '/tmp/{{ inventory_hostname }}/{{ environment_name }}/'
    remote_src: true
    mode: 'preserve'
  delegate_to: localhost
  changed_when: false
  check_mode: false

- name: Stage manager with deployment server selected apps
  become: false
  ansible.builtin.copy:
    src: '{{ absolute_file_store_path }}/etc/{{ selected_deployment_apps_sourcedir }}/{{ item.source_app }}/'
    dest: '/tmp/{{ inventory_hostname }}/{{ environment_name }}/{{ item.name }}/'
    remote_src: true
    mode: 'preserve'
  delegate_to: localhost
  when:
    - selected_deployment_apps_sourcedir is defined
    - item.state is defined
    - item.state != 'absent'
  loop: '{{ selected_deployment_apps | default([]) if selected_deployment_apps | default([]) is iterable else [] }}'
  changed_when: false
  check_mode: false

- name: Stage manager with versioned apps
  become: false
  ansible.builtin.copy:
    src: '{{ absolute_file_store_path }}/etc/{{ apps_generic_sourcedir }}/{{ item.source_app }}/'
    dest: '/tmp/{{ inventory_hostname }}/{{ environment_name }}/{{ item.name }}/'
    remote_src: true
    mode: 'preserve'
  delegate_to: localhost
  when:
    - apps_generic_sourcedir is defined
    - item.state is defined
    - item.state != 'absent'
  loop: '{{ versioned_apps | default([]) if versioned_apps | default([]) is iterable else [] }}'
  changed_when: false
  check_mode: false

- name: Include and run tasks from custom onboarding roles
  ansible.builtin.include_role:
    name: '{{ external_onboarding_role }}'
  loop_control:
    loop_var: external_onboarding_role
  loop: '{{ external_onboarding_deploymentapps_roles | default([]) if external_onboarding_deploymentapps_roles | default([]) is iterable else [] }}'
